<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API CatchAll - Logs des Requêtes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css">
    <style>
        :root {
            /* Thème clair (par défaut) */
            --bg-primary: white;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #e9ecef;
            --text-primary: #2c3e50;
            --text-secondary: #6c757d;
            --text-muted: #495057;
            --border-color: #e9ecef;
            --shadow: 0 20px 40px rgba(0,0,0,0.1);
            --header-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            --body-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        [data-theme="dark"] {
            /* Thème sombre */
            --bg-primary: #1a1a1a;
            --bg-secondary: #2d2d2d;
            --bg-tertiary: #404040;
            --text-primary: #ffffff;
            --text-secondary: #b0b0b0;
            --text-muted: #888888;
            --border-color: #404040;
            --shadow: 0 20px 40px rgba(0,0,0,0.3);
            --header-gradient: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            --body-gradient: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
        }

        /* Amélioration de la lisibilité JSON pour le thème sombre */
        [data-theme="dark"] .json-content {
            background: #1e1e1e !important;
            border: 1px solid #555 !important;
        }

        [data-theme="dark"] .json-content code {
            color: #d4d4d4 !important;
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        [data-theme="dark"] .json-content .token.property {
            color: #9cdcfe !important; /* Bleu clair pour les clés */
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        [data-theme="dark"] .json-content .token.string {
            color: #ce9178 !important; /* Orange clair pour les chaînes */
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        [data-theme="dark"] .json-content .token.number {
            color: #b5cea8 !important; /* Vert clair pour les nombres */
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        [data-theme="dark"] .json-content .token.boolean {
            color: #569cd6 !important; /* Bleu pour les booléens */
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        [data-theme="dark"] .json-content .token.null {
            color: #808080 !important; /* Gris pour null */
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        [data-theme="dark"] .json-content .token.punctuation {
            color: #d4d4d4 !important; /* Blanc pour la ponctuation */
            text-shadow: none !important; /* Supprimer l'ombre blanche */
        }

        /* Supprimer toutes les ombres de texte dans le thème sombre */
        [data-theme="dark"] .json-content * {
            text-shadow: none !important;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--body-gradient);
            min-height: 100vh;
            padding: 20px;
            transition: background 0.3s ease;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: var(--bg-primary);
            border-radius: 15px;
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: background 0.3s ease, box-shadow 0.3s ease;
        }

        .header {
            background: var(--header-gradient);
            color: white;
            padding: 30px;
            transition: background 0.3s ease;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            max-width: 1200px;
            margin: 0 auto;
        }

        .header-left {
            text-align: left;
        }

        .header-right {
            text-align: right;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .config-options {
            display: flex;
            flex-direction: column;
            gap: 8px;
            align-items: flex-end;
        }

        .config-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .config-item label {
            font-size: 0.9em;
            font-weight: 500;
            white-space: nowrap;
        }

        .config-select {
            padding: 4px 8px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 4px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 0.9em;
            min-width: 80px;
            transition: all 0.3s ease;
        }

        .config-select:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .config-select:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.7);
            background: rgba(255, 255, 255, 0.2);
        }

        .config-select option {
            background: var(--bg-primary);
            color: var(--text-primary);
        }

        .stats {
            display: flex;
            justify-content: space-around;
            padding: 20px;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            transition: background 0.3s ease, border-color 0.3s ease;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: var(--text-primary);
            transition: color 0.3s ease;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: color 0.3s ease;
        }

        .controls {
            padding: 20px;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background 0.3s ease, border-color 0.3s ease;
        }

        .button-group {
            display: flex;
            gap: 10px;
            align-items: center;
            width: 100%;
        }

        .refresh-btn {
            background: transparent;
            color: #28a745;
            border: 2px solid #28a745;
            padding: 5px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s;
        }

        .refresh-btn:hover {
            background: #28a745;
            color: white;
        }

        .clear-btn {
            background: transparent;
            color: #dc3545;
            border: 2px solid #dc3545;
            padding: 5px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s;
        }

        .clear-btn:hover {
            background: #dc3545;
            color: white;
        }

        .export-btn {
            background: transparent;
            color: #007bff;
            border: 2px solid #007bff;
            padding: 5px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s;
        }

        .export-btn:hover {
            background: #007bff;
            color: white;
        }

        .download-btn {
            background: transparent;
            color: #ffc107;
            border: 2px solid #ffc107;
            padding: 5px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s;
        }

        .download-btn:hover {
            background: #ffc107;
            color: #212529;
        }

        .theme-toggle-btn {
            background: transparent;
            color: #6c757d;
            border: 2px solid #6c757d;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.2em;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
        }

        .theme-toggle-btn:hover {
            background: #6c757d;
            color: white;
        }

        .copy-btn {
            background: transparent;
            color: #28a745;
            border: 2px solid #28a745;
            padding: 4px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.85em;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
            flex-shrink: 0;
        }

        .copy-btn:hover {
            background: #28a745;
            color: white;
            transform: translateY(-1px);
        }

        .copy-btn:active {
            transform: translateY(0);
        }

        .copy-btn.copied {
            background: #28a745;
            color: white;
            border-color: #28a745;
            transform: scale(1.05);
        }

        .delete-btn {
            background: transparent;
            color: #dc3545;
            border: 2px solid #dc3545;
            padding: 4px 12px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.85em;
            font-weight: 500;
            margin-right: 8px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 4px;
            flex-shrink: 0;
        }

        .delete-btn:hover {
            background: #dc3545;
            color: white;
            transform: translateY(-1px);
        }

        .delete-btn:active {
            transform: translateY(0);
        }

        .copy-icon {
            font-size: 0.9em;
        }

        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }

        .section-title {
            display: flex;
            align-items: center;
            flex: 1;
        }

        .section-buttons {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-left: auto;
        }

        .section-title h4 {
            margin: 0;
            margin-bottom: 0;
        }

        .search-box {
            padding: 8px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            flex: 1;
            font-size: 1em;
            background: var(--bg-primary);
            color: var(--text-primary);
            transition: border-color 0.3s ease, background 0.3s ease, color 0.3s ease;
            margin-left: 10px;
        }

        .search-box::placeholder {
            color: var(--text-muted);
        }

        .requests-container {
            max-height: 70vh;
            overflow-y: auto;
        }

        .request-item {
            border-bottom: 1px solid var(--border-color);
            padding: 20px;
            transition: background 0.3s, border-color 0.3s ease;
        }

        .request-item:hover {
            background: var(--bg-secondary);
        }

        .request-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .method-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.8em;
            text-transform: uppercase;
        }

        .method-post {
            background: #28a745;
            color: white;
        }

        .method-put {
            background: #ffc107;
            color: #212529;
        }

        .url {
            font-family: 'Courier New', monospace;
            font-size: 1.1em;
            color: var(--text-primary);
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .timestamp {
            color: var(--text-secondary);
            font-size: 0.9em;
            transition: color 0.3s ease;
        }

        .request-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 15px;
        }

        .request-details-vertical {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 15px;
        }

        .detail-section {
            background: var(--bg-secondary);
            padding: 15px;
            border-radius: 8px;
            transition: background 0.3s ease;
        }

        .detail-section h4 {
            color: var(--text-primary);
            margin-bottom: 10px;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
            cursor: pointer;
            user-select: none;
            transition: color 0.3s;
        }

        .detail-section h4:hover {
            color: var(--text-primary);
            opacity: 0.8;
        }

        .collapsible-content {
            display: none;
        }

        .collapsible-content.expanded {
            display: block;
        }

        .collapse-icon {
            display: inline-block;
            margin-right: 8px;
            transition: transform 0.3s;
        }

        .collapse-icon.expanded {
            transform: rotate(90deg);
        }

        .detail-content {
            font-family: 'Courier New', monospace;
            font-size: 0.85em;
            color: var(--text-muted);
            white-space: pre-wrap;
            word-break: break-all;
            max-height: 200px;
            overflow-y: auto;
            transition: color 0.3s ease;
        }

        .json-content {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            border-radius: 5px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 300px;
            overflow-y: auto;
            white-space: pre-wrap;
            transition: background 0.3s ease, border-color 0.3s ease;
        }

        .json-content pre {
            margin: 0;
            background: none;
            border: none;
            padding: 0;
        }

        .json-content code {
            background: none;
            border: none;
            padding: 0;
            font-size: inherit;
        }

        .ip-info {
            display: flex;
            gap: 20px;
            margin-bottom: 10px;
        }

        .ip-item {
            background: var(--bg-tertiary);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            transition: background 0.3s ease;
        }

        .no-requests {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-secondary);
            font-size: 1.2em;
            transition: color 0.3s ease;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
            transition: color 0.3s ease;
        }

        @media (max-width: 768px) {
            .request-details {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
            }
            
            .button-group {
                flex-direction: column;
                width: 100%;
            }
            
            .search-box {
                margin-left: 0;
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <div class="header-left">
                    <h1>🚀 API CatchAll</h1>
                    <p>Surveillance des requêtes POST et PUT en temps réel</p>
                </div>
                <div class="header-right">
                    <div class="config-options">
                        <div class="config-item">
                            <label for="responseCode">Réponse:</label>
                            <select id="responseCode" class="config-select">
                                <option value="200">200</option>
                                <option value="503">503</option>
                            </select>
                        </div>
                        <div class="config-item">
                            <label for="refreshInterval">Rafraîchissement:</label>
                            <select id="refreshInterval" class="config-select">
                                <option value="10">10s</option>
                                <option value="30" selected>30s</option>
                                <option value="60">60s</option>
                                <option value="120">120s</option>
                                <option value="0">Désactivé</option>
                            </select>
                        </div>
                        <div class="config-item">
                            <label for="language">Langue:</label>
                            <select id="language" class="config-select">
                                <option value="en">English</option>
                                <option value="fr" selected>Français</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="stats">
            <div class="stat-item">
                <div class="stat-number"><%= totalRequests %></div>
                <div class="stat-label">Requêtes Capturées</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="postCount">-</div>
                <div class="stat-label">POST</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="putCount">-</div>
                <div class="stat-label">PUT</div>
            </div>
            <div class="stat-item">
                <div class="stat-number"><%= currentTime %></div>
                <div class="stat-label">Dernière Mise à Jour</div>
            </div>
        </div>

        <div class="controls">
            <div class="button-group">
                <button class="refresh-btn" onclick="location.reload()">🔄 Actualiser</button>
                <button class="export-btn" onclick="exportAllData()">📤 Exporter</button>
                <button class="download-btn" onclick="downloadZip()">📦 Télécharger</button>
                <button class="clear-btn" onclick="clearAllData()">🗑️ Effacer tout</button>
                <button class="theme-toggle-btn" onclick="toggleTheme()" id="themeToggle">
                    <span id="themeIcon">🌙</span>
                </button>
                <input type="text" class="search-box" placeholder="Rechercher dans les requêtes..." id="searchBox">
            </div>
        </div>

        <div class="requests-container">
            <% if (requests.length === 0) { %>
                <div class="no-requests">
                    <h3>📭 Aucune requête capturée</h3>
                    <p>Les requêtes POST et PUT apparaîtront ici une fois reçues</p>
                </div>
            <% } else { %>
                <% requests.forEach((request, index) => { %>
                    <div class="request-item" data-index="<%= index %>">
                        <div class="request-header">
                            <div>
                                <span class="method-badge method-<%= request.method.toLowerCase() %>">
                                    <%= request.method %>
                                </span>
                                <span class="url"><%= request.url %></span>
                            </div>
                            <div class="timestamp">
                                <%= new Date(request.timestamp).toLocaleString('fr-FR') %>
                            </div>
                        </div>

                        <div class="ip-info">
                            <div class="ip-item">
                                <strong>IP:</strong> <%= request.ip_source %>
                            </div>
                            <% if (request.user_agent) { %>
                                <div class="ip-item">
                                    <strong>User-Agent:</strong> <%= request.user_agent.substring(0, 50) %><%= request.user_agent.length > 50 ? '...' : '' %>
                                </div>
                            <% } %>
                        </div>

                        <div class="request-details-vertical">
                            <div class="detail-section">
                                <h4 onclick="toggleCollapse('headers-<%= index %>')">
                                    <span class="collapse-icon">▶</span>📋 Headers
                                </h4>
                                <div class="collapsible-content" id="headers-<%= index %>">
                                    <div class="json-content">
                                        <pre><code class="language-json"><%= JSON.stringify(request.headers, null, 2) %></code></pre>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="detail-section">
                                <div class="section-header">
                                    <div class="section-title">
                                        <h4>📦 Payload</h4>
                                    </div>
                                    <div class="section-buttons">
                                        <button class="delete-btn" onclick="deleteRequest(<%= request.id %>, this)">
                                            <span>🗑️</span>
                                            <span>Supprimer</span>
                                        </button>
                                        <button class="copy-btn" onclick="copyToClipboard('payload-<%= index %>', this)">
                                            <span class="copy-icon">📋</span>
                                            <span>Copier</span>
                                        </button>
                                    </div>
                                </div>
                                <div class="json-content" id="payload-<%= index %>">
                                    <pre><code class="language-json"><%= request.payload || 'Aucun payload' %></code></pre>
                                </div>
                            </div>
                        </div>

                        <% if (Object.keys(request.query_params).length > 0) { %>
                            <div class="detail-section" style="margin-top: 15px;">
                                <h4>🔍 Paramètres de Requête</h4>
                                <div class="json-content" id="query-<%= index %>">
                                    <pre><code class="language-json"><%= JSON.stringify(request.query_params, null, 2) %></code></pre>
                                </div>
                            </div>
                        <% } %>
                    </div>
                <% }); %>
            <% } %>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script>
        // Système de traduction
        const translations = {
            en: {
                title: "API CatchAll",
                subtitle: "Real-time POST and PUT request monitoring",
                capturedRequests: "Captured Requests",
                lastUpdate: "Last Update",
                refresh: "Refresh",
                export: "Export",
                download: "Download",
                clearAll: "Clear All",
                search: "Search in requests...",
                headers: "Headers",
                payload: "Payload",
                copy: "Copy",
                delete: "Delete",
                noRequests: "No requests captured",
                response: "Response:",
                refreshInterval: "Refresh:",
                language: "Language:",
                disabled: "Disabled",
                confirmExport: "Do you want to export all data to JSON files?\n\n⚠️ WARNING: Data will be deleted from the database after export.",
                confirmClear: "Are you sure you want to clear all data? This action is irreversible.",
                confirmDelete: "Are you sure you want to delete this request? This action is irreversible.",
                exportSuccess: "Data exported successfully",
                exportError: "Error during data export",
                clearSuccess: "All data cleared successfully",
                clearError: "Error during data clearing",
                deleteSuccess: "Request deleted successfully",
                deleteError: "Error during request deletion",
                copySuccess: "Copied!",
                copyError: "Unable to copy content",
                zipError: "Error during ZIP generation",
                noFilesToDownload: "No files to download. Export directory is empty.",
                noJsonFiles: "No JSON files found in export directory."
            },
            fr: {
                title: "API CatchAll",
                subtitle: "Surveillance des requêtes POST et PUT en temps réel",
                capturedRequests: "Requêtes Capturées",
                lastUpdate: "Dernière Mise à Jour",
                refresh: "Actualiser",
                export: "Exporter",
                download: "Télécharger",
                clearAll: "Effacer tout",
                search: "Rechercher dans les requêtes...",
                headers: "Headers",
                payload: "Payload",
                copy: "Copier",
                delete: "Supprimer",
                noRequests: "Aucune requête capturée",
                response: "Réponse:",
                refreshInterval: "Rafraîchissement:",
                language: "Langue:",
                disabled: "Désactivé",
                confirmExport: "Voulez-vous exporter toutes les données dans des fichiers JSON ?\n\n⚠️ ATTENTION: Les données seront supprimées de la base après l'exportation.",
                confirmClear: "Etes-vous sûr de vouloir effacer toutes les données ? Cette action est irréversible.",
                confirmDelete: "Etes-vous sûr de vouloir supprimer cette requête ? Cette action est irréversible.",
                exportSuccess: "Données exportées avec succès",
                exportError: "Erreur lors de l'exportation des données",
                clearSuccess: "Toutes les données ont été effacées avec succès",
                clearError: "Erreur lors de l'effacement des données",
                deleteSuccess: "Requête supprimée avec succès",
                deleteError: "Erreur lors de la suppression de la requête",
                copySuccess: "Copié!",
                copyError: "Impossible de copier le contenu",
                zipError: "Erreur lors de la génération du ZIP",
                noFilesToDownload: "Aucun fichier à télécharger. Le répertoire export est vide.",
                noJsonFiles: "Aucun fichier JSON trouvé dans le répertoire d'export."
            }
        };

        let currentLanguage = localStorage.getItem('language') || 'fr';
        let refreshInterval = null;

        // Fonction pour traduire l'interface
        function translateInterface() {
            const t = translations[currentLanguage];
            
            // Titre et sous-titre
            document.querySelector('.header h1').textContent = t.title;
            document.querySelector('.header p').textContent = t.subtitle;
            
            // Labels des statistiques
            document.querySelectorAll('.stat-label')[0].textContent = t.capturedRequests;
            document.querySelectorAll('.stat-label')[3].textContent = t.lastUpdate;
            
            // Boutons
            document.querySelector('.refresh-btn').textContent = '🔄 ' + t.refresh;
            document.querySelector('.export-btn').textContent = '📤 ' + t.export;
            document.querySelector('.download-btn').textContent = '📦 ' + t.download;
            document.querySelector('.clear-btn').textContent = '🗑️ ' + t.clearAll;
            
            // Champ de recherche
            document.getElementById('searchBox').placeholder = t.search;
            
            // Labels des sections
            document.querySelectorAll('.detail-section h4').forEach((h4, index) => {
                if (h4.textContent.includes('Headers')) {
                    h4.innerHTML = '<span class="collapse-icon">▶</span>📋 ' + t.headers;
                } else if (h4.textContent.includes('Payload')) {
                    h4.innerHTML = '📦 ' + t.payload;
                }
            });
            
            // Boutons de copie et suppression
            document.querySelectorAll('.copy-btn span:last-child').forEach(span => {
                span.textContent = t.copy;
            });
            document.querySelectorAll('.delete-btn span:last-child').forEach(span => {
                span.textContent = t.delete;
            });
            
            // Message "Aucune requête"
            const noRequests = document.querySelector('.no-requests');
            if (noRequests) {
                noRequests.innerHTML = '<h3>📭 ' + t.noRequests + '</h3>';
            }
            
            // Options de configuration
            document.querySelector('label[for="responseCode"]').textContent = t.response;
            document.querySelector('label[for="refreshInterval"]').textContent = t.refreshInterval;
            document.querySelector('label[for="language"]').textContent = t.language;
            
            // Options de rafraîchissement
            const refreshSelect = document.getElementById('refreshInterval');
            refreshSelect.querySelector('option[value="0"]').textContent = t.disabled;
        }

        // Compter les méthodes
        document.addEventListener('DOMContentLoaded', function() {
            // Charger les paramètres sauvegardés
            loadSettings();
            
            // Traduire l'interface
            translateInterface();
            
            const requests = document.querySelectorAll('.request-item');
            let postCount = 0;
            let putCount = 0;
            
            requests.forEach(request => {
                const method = request.querySelector('.method-badge').textContent.trim();
                if (method === 'POST') postCount++;
                if (method === 'PUT') putCount++;
            });
            
            document.getElementById('postCount').textContent = postCount;
            document.getElementById('putCount').textContent = putCount;
            
            // Formater et appliquer le syntax highlighting à tous les blocs JSON
            formatAndHighlightJSON();
            
            // Configurer les événements
            setupEventListeners();
        });

        // Charger les paramètres sauvegardés
        function loadSettings() {
            const savedLanguage = localStorage.getItem('language');
            const savedResponseCode = localStorage.getItem('responseCode');
            const savedRefreshInterval = localStorage.getItem('refreshInterval');
            
            if (savedLanguage) {
                currentLanguage = savedLanguage;
                document.getElementById('language').value = savedLanguage;
            }
            
            if (savedResponseCode) {
                document.getElementById('responseCode').value = savedResponseCode;
            }
            
            if (savedRefreshInterval) {
                document.getElementById('refreshInterval').value = savedRefreshInterval;
                setupRefreshInterval(parseInt(savedRefreshInterval));
            }
        }

        // Configurer les événements
        function setupEventListeners() {
            // Changement de langue
            document.getElementById('language').addEventListener('change', function() {
                currentLanguage = this.value;
                localStorage.setItem('language', currentLanguage);
                translateInterface();
            });
            
            // Changement de code de réponse
            document.getElementById('responseCode').addEventListener('change', function() {
                localStorage.setItem('responseCode', this.value);
                // Envoyer la configuration au serveur
                updateServerConfig();
            });
            
            // Changement d'intervalle de rafraîchissement
            document.getElementById('refreshInterval').addEventListener('change', function() {
                const interval = parseInt(this.value);
                localStorage.setItem('refreshInterval', interval);
                setupRefreshInterval(interval);
            });
        }

        // Configurer l'intervalle de rafraîchissement
        function setupRefreshInterval(seconds) {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }
            
            if (seconds > 0) {
                refreshInterval = setInterval(() => {
                    location.reload();
                }, seconds * 1000);
            }
        }

        // Mettre à jour la configuration du serveur
        function updateServerConfig() {
            const responseCode = document.getElementById('responseCode').value;
            fetch('/config', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ responseCode: parseInt(responseCode) })
            }).catch(err => console.error('Erreur lors de la mise à jour de la configuration:', err));
        }

        // Fonction de recherche
        document.getElementById('searchBox').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const requestItems = document.querySelectorAll('.request-item');
            
            requestItems.forEach(item => {
                const text = item.textContent.toLowerCase();
                if (text.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        });

        // Fonction pour copier le contenu dans le presse-papier
        function copyToClipboard(elementId, button) {
            const element = document.getElementById(elementId);
            const code = element.querySelector('code');
            const text = code.textContent;
            
            // Utiliser l'API Clipboard moderne si disponible
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    showCopyFeedback(button);
                }).catch(err => {
                    console.error('Erreur lors de la copie:', err);
                    fallbackCopyTextToClipboard(text, button);
                });
            } else {
                // Fallback pour les navigateurs plus anciens
                fallbackCopyTextToClipboard(text, button);
            }
        }

        // Fonction de fallback pour la copie
        function fallbackCopyTextToClipboard(text, button) {
            const textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.top = "0";
            textArea.style.left = "0";
            textArea.style.position = "fixed";
            textArea.style.opacity = "0";
            
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    showCopyFeedback(button);
                } else {
                    alert('Impossible de copier le contenu');
                }
            } catch (err) {
                console.error('Erreur lors de la copie:', err);
                alert('Erreur lors de la copie');
            }
            
            document.body.removeChild(textArea);
        }

        // Fonction pour afficher le feedback de copie
        function showCopyFeedback(button) {
            const t = translations[currentLanguage];
            const icon = button.querySelector('.copy-icon');
            const text = button.querySelector('span:last-child');
            const originalIcon = icon.textContent;
            const originalText = text.textContent;
            
            // Animation de copie
            icon.textContent = '✅';
            text.textContent = t.copySuccess;
            button.classList.add('copied');
            
            setTimeout(() => {
                icon.textContent = originalIcon;
                text.textContent = originalText;
                button.classList.remove('copied');
            }, 2000);
        }

        // Fonction pour basculer l'affichage des sections collapsibles
        function toggleCollapse(elementId) {
            const content = document.getElementById(elementId);
            const icon = content.previousElementSibling.querySelector('.collapse-icon');
            
            if (content.classList.contains('expanded')) {
                content.classList.remove('expanded');
                icon.classList.remove('expanded');
                icon.textContent = '▶';
            } else {
                content.classList.add('expanded');
                icon.classList.add('expanded');
                icon.textContent = '▼';
                
                // Appliquer le syntax highlighting après l'expansion
                setTimeout(() => {
                    Prism.highlightAll();
                }, 10);
            }
        }

        // Fonction pour formater et colorer le JSON
        function formatAndHighlightJSON() {
            // Formater les payloads JSON
            document.querySelectorAll('[id^="payload-"]').forEach(element => {
                const code = element.querySelector('code');
                if (code && code.textContent !== 'Aucun payload') {
                    try {
                        const jsonObj = JSON.parse(code.textContent);
                        code.textContent = JSON.stringify(jsonObj, null, 2);
                    } catch (e) {
                        // Si ce n'est pas du JSON valide, laisser tel quel
                    }
                }
            });
            
            // Appliquer le syntax highlighting
            Prism.highlightAll();
        }

        // Fonction pour exporter toutes les données
        function exportAllData() {
            const t = translations[currentLanguage];
            if (confirm(t.confirmExport)) {
                fetch('/export', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`✅ ${data.message}`);
                    } else {
                        alert(`❌ ${t.exportError}: ${data.message}`);
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert(`❌ ${t.exportError}`);
                });
            }
        }

        // Fonction pour télécharger le ZIP
        function downloadZip() {
            const t = translations[currentLanguage];
            // Vérifier s'il y a des fichiers à télécharger
            fetch('/download-zip', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (response.ok) {
                    return response.blob();
                } else {
                    return response.json().then(data => {
                        throw new Error(data.message || t.zipError);
                    });
                }
            })
            .then(blob => {
                // Créer un lien de téléchargement
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.zip`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert(`❌ ${t.zipError}: ${error.message}`);
            });
        }

        // Fonction pour supprimer une requête individuelle
        function deleteRequest(requestId, button) {
            const t = translations[currentLanguage];
            if (confirm(t.confirmDelete)) {
                // Désactiver le bouton pendant la requête
                button.disabled = true;
                button.innerHTML = '<span>⏳</span><span>Suppression...</span>';
                
                fetch('/delete-request', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: requestId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Supprimer l'élément de la page
                        const requestItem = button.closest('.request-item');
                        requestItem.style.transition = 'opacity 0.3s ease';
                        requestItem.style.opacity = '0';
                        
                        setTimeout(() => {
                            requestItem.remove();
                            // Recharger la page pour mettre à jour les compteurs
                            location.reload();
                        }, 300);
                    } else {
                        alert(`❌ ${t.deleteError}: ${data.message}`);
                        // Réactiver le bouton
                        button.disabled = false;
                        button.innerHTML = '<span>🗑️</span><span>' + t.delete + '</span>';
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert(`❌ ${t.deleteError}`);
                    // Réactiver le bouton
                    button.disabled = false;
                    button.innerHTML = '<span>🗑️</span><span>' + t.delete + '</span>';
                });
            }
        }

        // Fonction pour effacer toutes les données
        function clearAllData() {
            const t = translations[currentLanguage];
            if (confirm(t.confirmClear)) {
                fetch('/clear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`✅ ${data.message}`);
                        location.reload();
                    } else {
                        alert(`❌ ${t.clearError}: ${data.message}`);
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert(`❌ ${t.clearError}`);
                });
            }
        }

        // L'auto-refresh est maintenant géré par setupRefreshInterval()

        // Gestion du thème clair/sombre
        function toggleTheme() {
            const body = document.body;
            const themeIcon = document.getElementById('themeIcon');
            
            if (body.getAttribute('data-theme') === 'dark') {
                // Passer au thème clair
                body.removeAttribute('data-theme');
                themeIcon.textContent = '🌙';
                localStorage.setItem('theme', 'light');
            } else {
                // Passer au thème sombre
                body.setAttribute('data-theme', 'dark');
                themeIcon.textContent = '☀️';
                localStorage.setItem('theme', 'dark');
            }
        }

        // Initialiser le thème au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('theme');
            const body = document.body;
            const themeIcon = document.getElementById('themeIcon');
            
            if (savedTheme === 'dark') {
                body.setAttribute('data-theme', 'dark');
                themeIcon.textContent = '☀️';
            } else {
                body.removeAttribute('data-theme');
                themeIcon.textContent = '🌙';
            }
        });
    </script>
</body>
</html>
